<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金缮的随笔</title>
  
  <subtitle>sub</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="yexiaosong.github.io/"/>
  <updated>2020-10-11T17:15:44.092Z</updated>
  <id>yexiaosong.github.io/</id>
  
  <author>
    <name>晓松</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在饿厂的两年</title>
    <link href="yexiaosong.github.io/2020/06/26/%E5%9C%A8%E9%A5%BF%E5%8E%82%E5%B0%86%E8%BF%91%E4%B8%A4%E5%B9%B4/"/>
    <id>yexiaosong.github.io/2020/06/26/%E5%9C%A8%E9%A5%BF%E5%8E%82%E5%B0%86%E8%BF%91%E4%B8%A4%E5%B9%B4/</id>
    <published>2020-06-26T17:23:31.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉，在饿厂已经快两年了。这两年，自己还是成长了很多，挑个时间也想把近两年的过程和体会发一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不知不觉，在饿厂已经快两年了。这两年，自己还是成长了很多，挑个时间也想把近两年的过程和体会发一下&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="thinking" scheme="yexiaosong.github.io/tags/thinking/"/>
    
  </entry>
  
  <entry>
    <title>React-Native 真的是移动开发的未来吗?</title>
    <link href="yexiaosong.github.io/2018/06/20/React-Native-%E7%9C%9F%E7%9A%84%E6%98%AF%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AA%E6%9D%A5%E5%90%97/"/>
    <id>yexiaosong.github.io/2018/06/20/React-Native-%E7%9C%9F%E7%9A%84%E6%98%AF%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E7%9A%84%E6%9C%AA%E6%9D%A5%E5%90%97/</id>
    <published>2018-06-20T16:34:28.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<p>公司本年度有App任务，陆陆续续用RN开发了两个应用。一款是涉及仪器控制的平板项目，另一款是客户端的App。下文谈谈使用RN开发的部分认知(其实只是随便扯一扯，没有什么深度)</p><h2 id="我们适合使用RN吗？"><a href="#我们适合使用RN吗？" class="headerlink" title="我们适合使用RN吗？"></a>我们适合使用RN吗？</h2><p>其实能问出这个问题的我猜只有小公司了(比如我们)，因为大公司早已入坑，甚至已有公司出坑了(Airbnb)。</p><h3 id="RN的优势"><a href="#RN的优势" class="headerlink" title="RN的优势"></a>RN的优势</h3><ul><li>满足需求变更的快速发版。原生代码审核时间长，Hybird运行速度又不够快。</li><li>很多小公司想不招移动开发而开发App，节约成本。</li><li>跨平台，一份代码，稍微改动部分就可以运行在两个平台上。</li><li>业务类代码开发很快。</li></ul><h3 id="RN的弊端"><a href="#RN的弊端" class="headerlink" title="RN的弊端"></a>RN的弊端</h3><ul><li><p>坑多，这个坑在方方面面。RN在0.5x版本上，安卓系统上的border渲染就有锯齿，后来我们不分border效果是使用图片实现的，汗啊~</p></li><li><p>第三方组件不全。RN作为一个有影响力开源项目，有很多第三方组件，但是可以毫不客气的说，都不完美~ 无论是相机调用、音频播放还是消息处理，甚至路由组件。很多组件需要修改源码。因为这个组件依赖于RN0.4x，而另一个依赖于RN0.5x，这就特别尴尬。所以还是自己原生开发工程师提供接口，通过JS bridge调用比较好。</p></li><li><p>对前端来说，开发完整的App还是需要懂原生开发知识，对一般程序员来说Android开发用的Java还好，但是ios的开发语言OC简直是魔咒。当然我们可以面向百度和Google编程，不过这会浪费大量的时间且做出来并不完美。所以，公司想做App的话还是至少需要一个懂Android开发和懂IOS开发的工程师。</p></li><li><p>屏幕适配，虽然RN的尺寸是相对尺寸，且提供了获取屏幕密度等方法，但是具体到设备上，还是各有不同。不过相对轻松的是，我开发的平板项目只有一个尺寸，所以甚至可以使用定位来处理布局。</p></li></ul><h2 id="开发中的经验"><a href="#开发中的经验" class="headerlink" title="开发中的经验"></a>开发中的经验</h2><h3 id="配置完RN环境，以安卓为例"><a href="#配置完RN环境，以安卓为例" class="headerlink" title="配置完RN环境，以安卓为例"></a>配置完RN环境，以安卓为例</h3><p>在使用react-native run-android之后，本质是将Java等初始化代码打成了一个包，后续开发和动态更新都是通过读取在通过命令启动的8081端口服务下的js bundle实现的，所以初次出现如下提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to load script from assets <span class="string">'index.android.bundle'</span> ...</span><br></pre></td></tr></table></figure><p>只需要摇一摇真机，在出现的dialog中设置Dev setting中的host、port再reload后就正常了</p><h3 id="因Android版本问题导致的无法安装"><a href="#因Android版本问题导致的无法安装" class="headerlink" title="因Android版本问题导致的无法安装"></a>因Android版本问题导致的无法安装</h3><p>我是首次是通过Android 6.0开发，后来打算使用Android 5.1进行测试。错误信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.android.builder.testing.api.DeviceException: com.android.ddmlib.InstallException: Failed to install all</span><br></pre></td></tr></table></figure><p>出现这种情况，网上很多说是通过修改gradle来进行修改，但是通常开发android程序时，需要测试不同的设备。可以直接使用adb命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install android/app/build/outputs/apk/app-debug.apk</span><br></pre></td></tr></table></figure><h3 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h3><p>特别是在使用了babel-resolver之后—，错误信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to resolve module ***</span><br></pre></td></tr></table></figure><p>解决方式：<br>react-native start –reset-cache</p><h3 id="JSX注释语法"><a href="#JSX注释语法" class="headerlink" title="JSX注释语法"></a>JSX注释语法</h3><p>在使用<code>command + /</code>添加注释后，经常出现错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot add a child node that doesn<span class="string">'t have a YogaNode to a parent without measure function</span></span><br></pre></td></tr></table></figure><p>解决方式当然是检查自己的JSX代码是否注释写的不对。</p><h3 id="摇一摇问题的解决-Android"><a href="#摇一摇问题的解决-Android" class="headerlink" title="摇一摇问题的解决(Android)"></a>摇一摇问题的解决(Android)</h3><p>在我们使用了<code>Mobx Redux</code>等状态管理时，热更新不会更新这些代码，而频繁摇一摇实在是太累了。此时可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 82</span><br></pre></td></tr></table></figure><p>此时相当于虚拟了一个摇一摇事件。</p><h3 id="远程调试-root设备"><a href="#远程调试-root设备" class="headerlink" title="远程调试(root设备)"></a>远程调试(root设备)</h3><p>当我们的开发环境可能有多种设备且不方便插USB得话，可以进行Adb远程调试。方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 安卓端：首先安装安卓终端模拟器</span><br><span class="line">su</span><br><span class="line">setprop service.adb.tcp.port 5555</span><br><span class="line">stop adbd</span><br><span class="line">start adbd</span><br><span class="line">2. 开发端：</span><br><span class="line">adb connect ANDROID_HOST</span><br><span class="line">adb install ***.apk</span><br><span class="line">需要唤出设置页面的话，用上面的摇一摇问题的解决方案</span><br></pre></td></tr></table></figure><h3 id="JS调用Android代码"><a href="#JS调用Android代码" class="headerlink" title="JS调用Android代码"></a>JS调用Android代码</h3><p>以通过js获取原生Android序列号为例，此处代码会比官方文档全。其他的可以参考<a href="http://facebook.github.io/react-native/docs/native-modules-android" target="_blank" rel="noopener">官方文档</a></p><ul><li>在与android的MainActivity同级目录下新建一个SerialNumberModule.java文件，内容如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialNumberModule</span> <span class="keyword">extends</span> <span class="title">ReactContextBaseJavaModule</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"SerialNumber"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SerialNumberModule</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(reactContext);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ReactMethod</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSerialNumber</span> <span class="params">(Callback successCallback, Callback errorCallback)</span> </span>&#123;</span><br><span class="line">        String SerialNumber = android.os.Build.SERIAL;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            successCallback.invoke(SerialNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalViewOperationException e) &#123;</span><br><span class="line">            errorCallback.invoke(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在新建一个SerialNumberPackage.java文件，用来添加模块，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerialNumberPackage</span> <span class="keyword">implements</span> <span class="title">ReactPackage</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;ViewManager&gt; <span class="title">createViewManagers</span><span class="params">(ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;NativeModule&gt; <span class="title">createNativeModules</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ReactApplicationContext reactContext)</span> </span>&#123;</span><br><span class="line">        List&lt;NativeModule&gt; modules = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        modules.add(<span class="keyword">new</span> SerialNumberModule(reactContext));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> modules;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在本目录的MainApplication.java中重写的getPackages中new此模块，代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</span><br><span class="line">          <span class="keyword">new</span> MainReactPackage(),</span><br><span class="line">                <span class="keyword">new</span> SerialNumberPackage()</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>js端调用，以rn的入口App.js为例<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NativeModules &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></span><br><span class="line">*******</span><br><span class="line">在组件内：</span><br><span class="line">componentWillMount () &#123;</span><br><span class="line">    NativeModules.SerialNumber.getSerialNumber(<span class="function"><span class="params">success</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'success'</span>, success)</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'err'</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="发行IOS包"><a href="#发行IOS包" class="headerlink" title="发行IOS包"></a>发行IOS包</h3><p>可以在项目根目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. react-native bundle --entry-file index.js --bundle-output ./ios/bundle/index.ios.jsbundle --platform ios --assets-dest ./ios/bundle --dev <span class="literal">false</span></span><br><span class="line">2. 修改AppDelegate.m文件，将</span><br><span class="line">jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@<span class="string">"index.ios"</span> fallbackResource:nil];</span><br><span class="line">注释掉，并添加</span><br><span class="line">jsCodeLocation = [[NSBundle mainBundle] URLForResource:@<span class="string">"index.ios"</span> withExtension:@<span class="string">"jsbundle"</span>];</span><br><span class="line">3. 将打好的文件在ios目录下的bundle目录里的两个文件和一个文件夹拖拽到Xcode的项目相应名字的目录下</span><br><span class="line">4. 插上真机，在Xcode的目标上选择真机，点击Xcode标题栏的product --&gt; archive即可</span><br></pre></td></tr></table></figure><blockquote><p>先上结论，个人认为这种开发模式迟早会结束，第三方强行兼容设备总是不行的，个人还是信WEB, 信W3C。踩坑还在进行，上述只是一点开发经验。大神轻喷，同行人欢迎一起讨论。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司本年度有App任务，陆陆续续用RN开发了两个应用。一款是涉及仪器控制的平板项目，另一款是客户端的App。下文谈谈使用RN开发的部分认知(其实只是随便扯一扯，没有什么深度)&lt;/p&gt;
&lt;h2 id=&quot;我们适合使用RN吗？&quot;&gt;&lt;a href=&quot;#我们适合使用RN吗？&quot; cla
      
    
    </summary>
    
    
    
      <category term="FE" scheme="yexiaosong.github.io/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title>vue引入ueditor及node后台配置</title>
    <link href="yexiaosong.github.io/2017/11/13/vue%E5%BC%95%E5%85%A5ueditor%E5%8F%8Anode%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/"/>
    <id>yexiaosong.github.io/2017/11/13/vue%E5%BC%95%E5%85%A5ueditor%E5%8F%8Anode%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE/</id>
    <published>2017-11-13T13:24:40.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的某个客户要用上我们公司的产品，他的后台管理里的富文本编辑器要求有点多，开始打算用Quill，但是发现Quill根本满足不了他的需求。在调研了市面上的富文本编辑器后，最后似乎只剩了百度的ueditor。虽然很丑<del>~</del>，不过没关系，政府网站和这种效果更搭:-D 我是不是说了什么（逃</p><h2 id="vue引入ueditor"><a href="#vue引入ueditor" class="headerlink" title="vue引入ueditor"></a>vue引入ueditor</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>百度ueditor下载，随便哪个版本就好(本文章以php版为例)，不需要特别全面功能的可以考虑下UM喽</li><li>将对应的文件夹放到static中</li><li>修改前端vue部分引用的ueditor.confg.js，设置路径window.UEDITOR_HOME_URL = “/static/utf8-php/“<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.UEDITOR_HOME_URL = <span class="string">"/static/utf8-php/"</span></span><br><span class="line">    <span class="keyword">var</span> URL = <span class="built_in">window</span>.UEDITOR_HOME_URL || getUEBasePath();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">window</span>.UEDITOR_CONFIG = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为编辑器实例添加一个路径，这个不能被注释</span></span><br><span class="line">        UEDITOR_HOME_URL: URL</span><br><span class="line">        <span class="comment">// 服务器统一请求接口路径</span></span><br><span class="line">        , <span class="attr">serverUrl</span>: <span class="string">"http://localhost:3000/ueditor/ue"</span></span><br><span class="line">    <span class="comment">// ............   下面忽略................</span></span><br></pre></td></tr></table></figure></li><li>编写vue文件,我已经把static配置到webpack的路径里了，自己可以相应更改，ueditor中的各项方法可以在自己下载的百度ueditor包的index.html中找。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">type</span>=<span class="string">"text/plain"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"show"</span>&gt;</span>你敢点一下吗？<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      editor: <span class="literal">null</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show () &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.editor.getContent())</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'static/utf8-php/ueditor.config.js'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'static/utf8-php/ueditor.all.min.js'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'static/utf8-php/lang/zh-cn/zh-cn.js'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="built_in">require</span>(<span class="string">'static/utf8-php/ueditor.parse.min.js'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.editor = <span class="built_in">window</span>.UE.getEditor(<span class="string">'editor'</span>)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.editor.destroy()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></li><li>在步骤3中的路径一定要有最后一个”/“</li><li>步骤3中的serverUrl写成对应的服务端地址</li></ol><h2 id="node后端处理"><a href="#node后端处理" class="headerlink" title="node后端处理"></a>node后端处理</h2><h3 id="express-实现"><a href="#express-实现" class="headerlink" title="express 实现"></a>express 实现</h3><p>网上有人已经实现了express版的，使用express的有福了。不过我直接用他的是不能直接用的，在浏览器中报”: unexcepected “，我将他的代码改了一下，不让它在返回配置是重定向，而是直接返回一个jsonp，jsonp内容设置为百度的ueditor包中的php文件下的config.json，记得用正则表达式或者直接用手把注释去掉，json是没有注释的。<br>这时你可能发现不报错了，但是图片上传会错误，报404。其实图片已经上传成功了，只是没有正确的加载，因为返回的路径只是路径，不是完整的url，就会请求到前端服务域下。（例如<a href="http://localhost:8080/**)。此时修改config.json中&quot;imageUrlPrefix&quot;" target="_blank" rel="noopener">http://localhost:8080/**)。此时修改config.json中&quot;imageUrlPrefix&quot;</a>: “<a href="http://localhost:3000&quot;,就可以将图片路径补充完整。跨域问题自己解决哈-----">http://localhost:3000&quot;,就可以将图片路径补充完整。跨域问题自己解决哈-----</a></p><ol><li>res.jsonp(config.json)</li><li>给config.json的imageUrlPrefix加后端域<h3 id="koa实现"><a href="#koa实现" class="headerlink" title="koa实现"></a>koa实现</h3>这时个比较精巧的库，而且将在v3中去掉了generator写法，generator现在已经渐渐不被支持，所以使用async写法吧。我主要用了await-busboy这个库，实现文件处理。</li><li>实现判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ActionType = ctx.query.action</span><br><span class="line"><span class="comment">// 当ActionType为config时返回与express中一样的json</span></span><br><span class="line"><span class="comment">// 当为uploadimage或uploadfile时处理</span></span><br></pre></td></tr></table></figure></li><li>处理上传<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parse = <span class="built_in">require</span>(<span class="string">'await-busboy'</span>)</span><br><span class="line"><span class="keyword">const</span> parts = parse(ctx)</span><br><span class="line">    <span class="keyword">let</span> part,</span><br><span class="line">        stream,</span><br><span class="line">        tmp_name,</span><br><span class="line">        file_path,</span><br><span class="line">        filename</span><br><span class="line">    <span class="keyword">while</span> ((part = <span class="keyword">await</span> parts)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (part.length) &#123;</span><br><span class="line">          <span class="comment">// 此处解析到form的fields</span></span><br><span class="line">          <span class="built_in">console</span>.log(&#123; <span class="attr">key</span>: part[<span class="number">0</span>], <span class="attr">value</span>: part[<span class="number">1</span>] &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 此处解析到文件并以可读流形式返回，通过nodejs官方API存储</span></span><br><span class="line">        <span class="keyword">if</span>(ActionType === <span class="string">'uploadimage'</span> &amp;&amp; img_type.indexOf(path.extname(part.filename)) &gt;= <span class="number">0</span> )&#123;</span><br><span class="line">            filename = <span class="string">'pic_'</span>+ (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() + <span class="string">'_'</span> + part.filename</span><br><span class="line">            file_path = path.join(img_path, filename)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ActionType === <span class="string">'uploadfile'</span>)&#123;</span><br><span class="line">            filename = <span class="string">'file_'</span>+(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime()+<span class="string">'_'</span>+part.filename</span><br><span class="line">            file_path = path.join(files_path, filename)</span><br><span class="line">        &#125;</span><br><span class="line">        stream = fs.createWriteStream(path.join(static_path,file_path))</span><br><span class="line">        part.pipe(stream)</span><br><span class="line">        tmp_name = part.filename</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回json也要返回对应的jsonp形式哦~~</span></span><br></pre></td></tr></table></figure>到这大概可以了，自己去试一下吧~~</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司的某个客户要用上我们公司的产品，他的后台管理里的富文本编辑器要求有点多，开始打算用Quill，但是发现Quill根本满足不了他的需求。在调研了市面上的富文本编辑器后，最后似乎只剩了百度的ueditor。虽然很丑&lt;del&gt;~&lt;/del&gt;，不过没关系，政府网站和这种效果
      
    
    </summary>
    
    
    
      <category term="FE" scheme="yexiaosong.github.io/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title>python 网络</title>
    <link href="yexiaosong.github.io/2017/09/28/python-%E7%BD%91%E7%BB%9C/"/>
    <id>yexiaosong.github.io/2017/09/28/python-%E7%BD%91%E7%BB%9C/</id>
    <published>2017-09-28T14:24:43.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>多进程与多线程</title>
    <link href="yexiaosong.github.io/2017/09/21/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>yexiaosong.github.io/2017/09/21/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2017-09-21T15:41:09.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>在linux系统中，0号进程为切换各进程的进程，并简介调用了1号进程，创建了系统。在使用多进程时，如果父进程先结束，子进程还没结束，则需要1号进程清理。</p><h3 id="类UNIX系统"><a href="#类UNIX系统" class="headerlink" title="类UNIX系统"></a>类UNIX系统</h3><p>在类UNIX操作系统中，可以引入os库，里面有fork方法。当pid为0时，则为子进程。而且此方法返回两个值，一个父进程号，另一个子0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">pid = os.fork()</span><br><span class="line"><span class="keyword">if</span> pid == <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'----子进程-----'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'---父进程---'</span>)</span><br></pre></td></tr></table></figure><h3 id="跨平台方式"><a href="#跨平台方式" class="headerlink" title="跨平台方式"></a>跨平台方式</h3><p>引入multiprocessing模块中的Process方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">"---test---"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p = Process(target = test)</span><br><span class="line">p.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(<span class="string">'---main---'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>运行程序后会出现main和test交替出现的情况–即多线程。在上述代码中，Process最少接受一个参数，为target，表示子进程运行哪个代码段。其中process与使用fork函数的不同之处在于：fork的子进程和主进程可以不同时存在，即父进程死后子进程依旧可以运行。而使用process创建的进程在父进程死掉后，子进程会挂掉。换句话说，父进程一直等待所有的子进程。</p><ul><li>join() 此方法表示等到标记的进程都结束后才继续往下走，如果函数中传入了参数，则相当于等待一段时间后才实现。类似于setTimeout</li><li>terminate() 终止子进程</li></ul><h3 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h3><p>进程池相当于缓冲，它先开几个进程，当你需要使用时调用即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i range(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">"---pid = %d---"</span>%os.getpid())</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">pool = Pool(<span class="number">3</span>) <span class="comment">#指定进程数，最多三个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    pool.apply_async(worker) <span class="comment">#向进程池中添加任务，非堵塞方式,堵塞方式没有什么意义</span></span><br><span class="line"></span><br><span class="line">pool.close() <span class="comment"># 关闭进程池，不能再次添加新任务</span></span><br><span class="line">pool.join() <span class="comment"># 主进程  执行了任务后，不会一直等到所有任务都完成才结束，主进程任务完成就推出。如果没有join，则进程池中的任务不会执行。</span></span><br></pre></td></tr></table></figure><h3 id="进程间通讯"><a href="#进程间通讯" class="headerlink" title="进程间通讯"></a>进程间通讯</h3><p>使用Queue, 类似的有vuex。Queue为堵塞的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue</span><br><span class="line">q = Queue(<span class="number">3</span>)</span><br><span class="line">q.qsize() <span class="comment">#---&gt;0</span></span><br><span class="line">q.put(<span class="string">'num1'</span>)</span><br><span class="line">q.qsize() <span class="comment">#---&gt;1</span></span><br><span class="line">q.get() <span class="comment">#---&gt;num1</span></span><br><span class="line">q.get_nowait()<span class="comment"># ---&gt;如果使用get则会堵塞，但是使用get_nowait则会发生异常，以为强行取值。</span></span><br></pre></td></tr></table></figure><p>由上面代码知道在进行get之前需要先使用qsize()。<br>但是上面的代码只适用于通过processing创建出的多任务，不适合通过pool创建出的多任务。若要使用进程池，则如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Manager</span><br><span class="line">q = Manager().Queue()</span><br></pre></td></tr></table></figure><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><ul><li>通常父线程等待子线程结束再结束。</li><li>线程之间共享全局变量，不会和进程一样单独的作用域<h3 id="使用类似Process创建多进程的方式"><a href="#使用类似Process创建多进程的方式" class="headerlink" title="使用类似Process创建多进程的方式"></a>使用类似Process创建多进程的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">imort time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'----thread----'</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    t = Thread(target = test)</span><br><span class="line">    t.start() <span class="comment">#---&gt;类似于multiprocessing 中的Process</span></span><br></pre></td></tr></table></figure><h3 id="使用类对多线程进行封装"><a href="#使用类对多线程进行封装" class="headerlink" title="使用类对多线程进行封装"></a>使用类对多线程进行封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            msg = <span class="string">'THIS IS'</span> + self.name + <span class="string">'@'</span> + str(i)</span><br><span class="line">            print(msg)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start</span><br></pre></td></tr></table></figure><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3>为了解决共享变量出现的bug，出现了互斥锁。(全局变量是公用的，局部变量是独立的)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line">mutex = Lock() <span class="comment">#创建一个默认开着的锁</span></span><br><span class="line">mutex.acquire([blocking]) <span class="comment">#加锁</span></span><br><span class="line">mutex.release() <span class="comment">#释放锁</span></span><br></pre></td></tr></table></figure>具体使用方式如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">py_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc_num1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> py_num</span><br><span class="line">    mutex.acquire() <span class="comment">#此锁锁定时，inc_num2堵塞</span></span><br><span class="line">    <span class="keyword">for</span> i i range(<span class="number">999999</span>):</span><br><span class="line">        py_num += <span class="number">1</span></span><br><span class="line">    mutex.release()</span><br><span class="line">    print(<span class="string">'py_num is %d'</span>%py_num)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inc_num2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> py_num</span><br><span class="line">    mutex.acquire()</span><br><span class="line">    <span class="keyword">for</span> i i range(<span class="number">999999</span>):</span><br><span class="line">        py_num += <span class="number">1</span></span><br><span class="line">    mutex.release()</span><br><span class="line">    print(<span class="string">'py_num2 is %d'</span>%py_num)</span><br><span class="line"></span><br><span class="line">mutex = Lock()</span><br><span class="line">p1 = Thread(target = inc_num1)</span><br><span class="line">p1.start()</span><br><span class="line">p2 = Thread(target = inc_num2)</span><br><span class="line">p2.start()</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3>互相锁住，使用blocking处理</li></ul><h3 id="python多线程是假的"><a href="#python多线程是假的" class="headerlink" title="python多线程是假的"></a>python多线程是假的</h3><p>在python中，多核多线程是假的，因为存在GIL锁，此时想要彻底使用多线程可以调用其它语言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;多进程&quot;&gt;&lt;a href=&quot;#多进程&quot; class=&quot;headerlink&quot; title=&quot;多进程&quot;&gt;&lt;/a&gt;多进程&lt;/h2&gt;&lt;p&gt;在linux系统中，0号进程为切换各进程的进程，并简介调用了1号进程，创建了系统。在使用多进程时，如果父进程先结束，子进程还没结束，
      
    
    </summary>
    
    
    
      <category term="python" scheme="yexiaosong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python核心知识点2</title>
    <link href="yexiaosong.github.io/2017/09/16/python%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B92/"/>
    <id>yexiaosong.github.io/2017/09/16/python%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B92/</id>
    <published>2017-09-16T16:32:23.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python作用域"><a href="#python作用域" class="headerlink" title="python作用域"></a>python作用域</h2><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><p>可以在定义变量的前面加上global，这样可以覆盖掉全局变量</p><h3 id="locals"><a href="#locals" class="headerlink" title="locals()"></a>locals()</h3><p>打印局部变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    age = <span class="number">22</span></span><br><span class="line">    name = <span class="string">'Jack'</span></span><br><span class="line">    print(locals())</span><br></pre></td></tr></table></figure><h2 id="types-MethodType"><a href="#types-MethodType" class="headerlink" title="types.MethodType"></a>types.MethodType</h2><p>可以实现动态添加方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.score &gt;=<span class="number">80</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'A'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'B'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span></span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">s1 = Stu(<span class="string">'Alex'</span>,<span class="number">100</span>)</span><br><span class="line">s1.get_grade = types.MethodType(get_grade, s1, Stu)</span><br><span class="line"><span class="keyword">print</span> s1.get_score()</span><br><span class="line"></span><br><span class="line">如果不采用这种方式，直接调用get_score方法，则会报出Attribute的错误</span><br></pre></td></tr></table></figure><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>type关键词一方面可以用来显示属性，另一方面可以动态创建属性。<br>实质上，type是在python中创建类的最初元类，可以使用<strong>class</strong>属性查看父类，类似于js的<strong>proto</strong>，在各种类的尽头都是type</p><h3 id="使用type动态创建类"><a href="#使用type动态创建类" class="headerlink" title="使用type动态创建类"></a>使用type动态创建类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"----eat----"</span>)</span><br><span class="line">Dog = type(<span class="string">"Dog"</span>,(Animal,),&#123;&#125;)</span><br><span class="line">其中type后的第一个参数为类名(字符串)，第二个为继承元素(元组)，第三个为类中的属性(字典)。</span><br></pre></td></tr></table></figure><h3 id="metaclass属性"><a href="#metaclass属性" class="headerlink" title="metaclass属性"></a><strong>metaclass</strong>属性</h3><p>这个属性是python中定义类的一种拦截方式，因为在python中定义类时，首先会寻找本创建对象中有没有<strong>metaclass</strong>属性，如果有会根据里面的设置创建类。如果没有回去父类中，然后模块中，然后内置的type。初学用不到，后期补充</p><h3 id="slots"><a href="#slots" class="headerlink" title="slots"></a><strong>slots</strong></h3><p>由于动态语言的动态性能，导致实例的类和属性不可控，所以，可以使用<strong>slot</strong>来限制可以定义的属性，例如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slot__ = (<span class="string">'name'</span>,<span class="string">'age'</span>)</span><br><span class="line">s1 = Stu()</span><br><span class="line">s1.name = <span class="string">'Jack'</span></span><br><span class="line">s1.age = <span class="number">22</span></span><br><span class="line">s1.sex = 'male'-----&gt;报错，AttributeError</span><br></pre></td></tr></table></figure><p>但是此属性只对当前类的实例有作用，对继承的类没作用。</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>python以引用计数为主，标记清除和分代收集两种机制为辅。</p><h3 id="小整数池"><a href="#小整数池" class="headerlink" title="小整数池"></a>小整数池</h3><p>范围在[-5,256]的数值，在python对象创建时已经创建了。所以在定义一系列值为1时，id都为一致的。<br>同理有字符串等</p><blockquote><p>详细GC机制不在总结，用到时再总结。</p></blockquote><h2 id="内建属性及方法"><a href="#内建属性及方法" class="headerlink" title="内建属性及方法"></a>内建属性及方法</h2><h3 id="常用内建属性"><a href="#常用内建属性" class="headerlink" title="常用内建属性"></a>常用内建属性</h3><ul><li><strong>init</strong> 构造初始化函数，创建实例后，赋值时使用。再<strong>new</strong>之后</li><li><strong>new</strong> 创建实例时调用</li><li><strong>str</strong> 实例字符串表示，突出可读性，如print</li><li><strong>repr</strong> 实例字符串表示，突出准确性</li><li><strong>del</strong> 引用计数为零的时候调用</li><li><strong>doc</strong> 类文档，使用help时调用</li><li><strong>class</strong> 实例所在的类</li><li><strong>getattribute</strong> 属性拦截器，类比于JavaScript中Object.defineProperty中的getter, 再<strong>getattribute</strong>中，不要使用self属性，可能会报错</li></ul><h3 id="常用内建方法"><a href="#常用内建方法" class="headerlink" title="常用内建方法"></a>常用内建方法</h3><ul><li>range() </li><li>map 函数，类比js中的map</li><li>filter ，类比js中的filter</li><li>reduce</li><li>set</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python作用域&quot;&gt;&lt;a href=&quot;#python作用域&quot; class=&quot;headerlink&quot; title=&quot;python作用域&quot;&gt;&lt;/a&gt;python作用域&lt;/h2&gt;&lt;h3 id=&quot;global&quot;&gt;&lt;a href=&quot;#global&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="python" scheme="yexiaosong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python核心知识点1</title>
    <link href="yexiaosong.github.io/2017/09/14/python%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>yexiaosong.github.io/2017/09/14/python%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2017-09-14T13:41:27.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现深拷贝"><a href="#实现深拷贝" class="headerlink" title="实现深拷贝"></a>实现深拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = copy.deepcopy(a)</span><br></pre></td></tr></table></figure><h2 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> _num: 单个下划线，私有化属性或方法，类对象子类可以访问到。无法通过<span class="keyword">from</span> ** <span class="keyword">import</span> * 引入</span><br><span class="line"><span class="number">2.</span> __num: 双下划线，避免与子类中的属性名冲突，无法在外界直接访问。</span><br><span class="line"><span class="number">3.</span> __init__ 特殊意义</span><br><span class="line"><span class="number">4.</span> num_ 避免与python 关键字冲突</span><br></pre></td></tr></table></figure><h2 id="property的使用"><a href="#property的使用" class="headerlink" title="property的使用"></a>property的使用</h2><p>可以类比javascript中的Object.defineProperty</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__num = <span class="number">100</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setNum</span><span class="params">(self, newNum)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'please input a number'</span>)</span><br><span class="line">        self.__num = newNum</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getNum</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__num</span><br><span class="line">    num = property(getNum, setNum)</span><br><span class="line"></span><br><span class="line">t = Num()</span><br><span class="line">t.num(200)----&gt;把num设置为了200</span><br></pre></td></tr></table></figure><h2 id="property的使用-1"><a href="#property的使用-1" class="headerlink" title="@property的使用"></a>@property的使用</h2><p>@装饰器(前言)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">等同于</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">m</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    m = staticmethod(m)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__num = <span class="number">100</span></span><br><span class="line"><span class="meta">    @property # 相当于getNum</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__num</span><br><span class="line"><span class="meta">    @num.setter # 相当于setNum</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(value, int):</span><br><span class="line">            self.__num = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'please input a number'</span>)</span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="判断是否可迭代"><a href="#判断是否可迭代" class="headerlink" title="判断是否可迭代"></a>判断是否可迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">isinstance(对象, Iterator)</span><br><span class="line"><span class="comment"># 返回True或False</span></span><br></pre></td></tr></table></figure><h3 id="迭代器转换"><a href="#迭代器转换" class="headerlink" title="迭代器转换"></a>迭代器转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">其他数据转换为迭代器</span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">iter(arr)</span><br><span class="line"><span class="comment"># ---&gt;输出 &lt;listiterator at 0x*****&gt;</span></span><br><span class="line"><span class="comment">#如果将iter(arr)赋给iterArr,则通过iterArr.next()可以依次取出值，直到报错。</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实现深拷贝&quot;&gt;&lt;a href=&quot;#实现深拷贝&quot; class=&quot;headerlink&quot; title=&quot;实现深拷贝&quot;&gt;&lt;/a&gt;实现深拷贝&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
    
      <category term="python" scheme="yexiaosong.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习(二)</title>
    <link href="yexiaosong.github.io/2017/09/07/sql2/"/>
    <id>yexiaosong.github.io/2017/09/07/sql2/</id>
    <published>2017-09-07T14:39:23.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表的关系"><a href="#表的关系" class="headerlink" title="表的关系"></a>表的关系</h2><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>为了防止插入无效数据，使用外键约束，而且添加了几个表之间的关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">scroll</span>(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> auto_increment primary <span class="keyword">key</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">foreign</span> <span class="keyword">key</span>(usrid) <span class="keyword">references</span> <span class="keyword">user</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> subject <span class="keyword">add</span> <span class="keyword">constraint</span> stu <span class="keyword">foreign</span> <span class="keyword">key</span>(stuid) <span class="keyword">references</span> student(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>以学生表为例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> students.nam, subjects.title, scores.score <span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid=students.id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> subjects <span class="keyword">on</span> scores.subid=subjects.id;</span><br></pre></td></tr></table></figure><p>这样可以将学生表中的分数以姓名，科目和分数三列展示出来，否则会只展示学生和成绩的ID。</p><ul><li>inner join 连接的表中，在所有的表中都会出现的数据才会展现。</li><li>left join 以左表为准，此例中将student中的数据全都展现出来。其他位置没有数据以null填充</li><li>right join 首先将多有表都有的数据展现，后将右边独有的数据填充，左端没有的以null填充</li></ul><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>为了实现对SQL语句的复用，使用view对语句进行封装</p><h3 id="试图创建"><a href="#试图创建" class="headerlink" title="试图创建"></a>试图创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> v_stu <span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> student.*, scores.score <span class="keyword">from</span> scores</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> students <span class="keyword">on</span> scores.stuid = students.id;</span><br></pre></td></tr></table></figure><h3 id="视图的使用"><a href="#视图的使用" class="headerlink" title="视图的使用"></a>视图的使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> v_stu;</span><br></pre></td></tr></table></figure><h2 id="自关联查询"><a href="#自关联查询" class="headerlink" title="自关联查询"></a>自关联查询</h2><p>相当于将数据合成大表，再进行选择。(实际使用一张表，但是逻辑上是多个表)</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="begin-—-gt-commit-—-gt-rollback"><a href="#begin-—-gt-commit-—-gt-rollback" class="headerlink" title="begin —&gt; commit —&gt;rollback"></a>begin —&gt; commit —&gt;rollback</h3><p>begin提交到内存，commit存至硬盘，rollback回到begin之前。相当于java中的进程锁。只要有失败，此次操作就失败。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><ul><li>避免存NUll，除非有特殊要求</li><li>数字比字符串效率更高</li><li>连接查询将优先级高的放前面，如=放在范围之前。尽量少用or</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;表的关系&quot;&gt;&lt;a href=&quot;#表的关系&quot; class=&quot;headerlink&quot; title=&quot;表的关系&quot;&gt;&lt;/a&gt;表的关系&lt;/h2&gt;&lt;h3 id=&quot;外键约束&quot;&gt;&lt;a href=&quot;#外键约束&quot; class=&quot;headerlink&quot; title=&quot;外键约束&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="boce" scheme="yexiaosong.github.io/categories/boce/"/>
    
    
      <category term="boce" scheme="yexiaosong.github.io/tags/boce/"/>
    
  </entry>
  
  <entry>
    <title>python学习</title>
    <link href="yexiaosong.github.io/2017/09/05/python%E5%AD%A6%E4%B9%A0/"/>
    <id>yexiaosong.github.io/2017/09/05/python%E5%AD%A6%E4%B9%A0/</id>
    <published>2017-09-05T13:30:25.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python-字符格式化"><a href="#python-字符格式化" class="headerlink" title="python 字符格式化"></a>python 字符格式化</h2><h3 id="python采用和c语言的方式，-格式化。例如："><a href="#python采用和c语言的方式，-格式化。例如：" class="headerlink" title="python采用和c语言的方式，%格式化。例如："></a>python采用和c语言的方式，%格式化。例如：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'%2d-%02d'</span> % (<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"><span class="string">' 3-01'</span></span><br></pre></td></tr></table></figure><p>其中，2d%中的2表示在输出后两个空格，02d%表示两个空格，且输出保持为前面补零。</p><h2 id="代码块和条件判断"><a href="#代码块和条件判断" class="headerlink" title="代码块和条件判断"></a>代码块和条件判断</h2><h3 id="表示后面缩进的代码是一个块"><a href="#表示后面缩进的代码是一个块" class="headerlink" title=":表示后面缩进的代码是一个块"></a>:表示后面缩进的代码是一个块</h3><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sth:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> sth <span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="迭代式"><a href="#迭代式" class="headerlink" title="迭代式"></a>迭代式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><h3 id="如果使用类似Java中的key-value形式，需要使用python内置函数enumerate，把list变成k-v对，例如"><a href="#如果使用类似Java中的key-value形式，需要使用python内置函数enumerate，把list变成k-v对，例如" class="headerlink" title="如果使用类似Java中的key-value形式，需要使用python内置函数enumerate，把list变成k-v对，例如"></a>如果使用类似Java中的key-value形式，需要使用python内置函数enumerate，把list变成k-v对，例如</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,value <span class="keyword">in</span> enumerate([<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]):</span><br><span class="line">print(i, value)   <span class="comment">#----&gt;0 A      1 B      2 C</span></span><br></pre></td></tr></table></figure><h3 id="遍历dict，生成k-v对可以遍历dict的items方法。否则只能遍历key值"><a href="#遍历dict，生成k-v对可以遍历dict的items方法。否则只能遍历key值" class="headerlink" title="遍历dict，生成k,v对可以遍历dict的items方法。否则只能遍历key值"></a>遍历dict，生成k,v对可以遍历dict的items方法。否则只能遍历key值</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'one'</span>: <span class="string">'laoda'</span>,<span class="string">'two'</span>:<span class="string">'loaer'</span>,<span class="string">'three'</span>: <span class="string">'laosan'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> d.items():</span><br><span class="line">print(k, <span class="string">'= '</span>, v)</span><br></pre></td></tr></table></figure><h3 id="判断组件是否可遍历"><a href="#判断组件是否可遍历" class="headerlink" title="判断组件是否可遍历"></a>判断组件是否可遍历</h3> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">if</span> isinstance(<span class="string">'abc'</span>,Iterable):</span><br><span class="line">print(<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">12</span></span><br><span class="line"><span class="keyword">while</span> a &gt; <span class="number">0</span>:</span><br><span class="line">a-=<span class="number">5</span></span><br><span class="line">print(a)    ----&gt;a=-3</span><br></pre></td></tr></table></figure><h3 id="range函数"><a href="#range函数" class="headerlink" title="range函数"></a>range函数</h3><p>list(range(5)) 生产从0到4的list<br>使用for item in range(5),则可以遍历出从0到4</p><h2 id="列表的增删查改—list"><a href="#列表的增删查改—list" class="headerlink" title="列表的增删查改—list"></a>列表的增删查改—list</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ul><li>append()</li><li>insert(1,’item’)，在下标为一的位置，增加了一个item元素</li><li>extent()  ,可以拓充列表，将括号内的列表加到前面的列表中<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3></li><li>pop() 删除最后一个</li><li>remove() 根据内容删除</li><li>del xxx[下标]根据下标删除<h3 id="查询-判断元素是否在列表中"><a href="#查询-判断元素是否在列表中" class="headerlink" title="查询   判断元素是否在列表中"></a>查询   判断元素是否在列表中</h3>if “xxx” in list  || if “xxx” not in list<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3>xxx[下标]=’’</li></ul><h2 id="元组—tuple"><a href="#元组—tuple" class="headerlink" title="元组—tuple"></a>元组—tuple</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p> classmates = (‘Michael’, ‘Bob’, ‘Tracy’)</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p> 只读</p><h3 id="坑："><a href="#坑：" class="headerlink" title="坑："></a>坑：</h3><p>  t=(1) ,表示t=1，与数学中的小括号冲突，此时使用t=(1,) ,表明t是一个只有1的元组</p><h2 id="字典的增删改查—dict"><a href="#字典的增删改查—dict" class="headerlink" title="字典的增删改查—dict"></a>字典的增删改查—dict</h2><h3 id="增加dic-‘name’-’alex’-dic-‘age’-22"><a href="#增加dic-‘name’-’alex’-dic-‘age’-22" class="headerlink" title="增加dic={‘name’:’alex’}  dic[‘age’]=22"></a>增加dic={‘name’:’alex’}  dic[‘age’]=22</h3><h3 id="查：-使用get-，可以避免错误"><a href="#查：-使用get-，可以避免错误" class="headerlink" title="查： 使用get()，可以避免错误"></a>查： 使用get()，可以避免错误</h3><h2 id="python切片"><a href="#python切片" class="headerlink" title="python切片"></a>python切片</h2><p> 字符串，列表，元组等中，使用。</p><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">L[<span class="number">1</span>:<span class="number">2</span>] 则表示从下标为<span class="number">1</span>到下表为<span class="number">2</span>，包前不顾后。正数<span class="number">0</span>为第一个，倒数第一个下标为<span class="number">-1.</span></span><br></pre></td></tr></table></figure><h3 id="还可以选择步长，例如"><a href="#还可以选择步长，例如" class="headerlink" title="还可以选择步长，例如"></a>还可以选择步长，例如</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L2 = range(<span class="number">10</span>)</span><br><span class="line">L2[2:8:3] ------&gt; [2,5]</span><br></pre></td></tr></table></figure><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line">则生成一个[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9.</span>.<span class="number">.100</span>]的列表</span><br></pre></td></tr></table></figure><h3 id="后面还可以写判断，例如"><a href="#后面还可以写判断，例如" class="headerlink" title="后面还可以写判断，例如"></a>后面还可以写判断，例如</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line">则生成一个[<span class="number">4</span>，<span class="number">16</span>，<span class="number">36</span>，<span class="number">64</span>，<span class="number">100</span>]的序列</span><br></pre></td></tr></table></figure><ul><li>将list中的大写转为小写<br>[s.lower() for s in L]</li></ul><h2 id="generator"><a href="#generator" class="headerlink" title="generator"></a>generator</h2><ul><li>在es6中的异步与此基本一致</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="打开文件方式："><a href="#打开文件方式：" class="headerlink" title="打开文件方式："></a>打开文件方式：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">f = open(<span class="string">'./a.txt'</span>,<span class="string">'r'</span>)</span><br><span class="line">   print(f.read)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line"><span class="keyword">if</span> f:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>但是每次这样try-catch很麻烦，所以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'./a.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">print(f.read())</span><br></pre></td></tr></table></figure><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>在打开文件后，进行write操作即可。</p><h2 id="常见的内建模块"><a href="#常见的内建模块" class="headerlink" title="常见的内建模块"></a>常见的内建模块</h2><h3 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h3><h2 id="虚拟镜像"><a href="#虚拟镜像" class="headerlink" title="虚拟镜像"></a>虚拟镜像</h2><h3 id="安装虚拟镜像"><a href="#安装虚拟镜像" class="headerlink" title="安装虚拟镜像"></a>安装虚拟镜像</h3><p>pip3 install vitualenv<br>但是安装后无法使用命令。后通过查询，输入sudo /usr/bin/easy_install virtualenv后即可<br> sudo pip install virtualenvwrapper 安装管理，将所有的virtualenv进行管理<br>  source /usr/local/bin/virtualenvwrapper.sh 将该脚本加入到bash配置中<br>默认虚拟空间在~/.virtualenvs中</p><h3 id="创建虚拟空间"><a href="#创建虚拟空间" class="headerlink" title="创建虚拟空间"></a>创建虚拟空间</h3><p> mkvirtualenv myenv</p><h3 id="使用指定的python版本"><a href="#使用指定的python版本" class="headerlink" title="使用指定的python版本"></a>使用指定的python版本</h3><p>mkvirtualenv -p python3.4 venv</p><h3 id="启动虚拟环境"><a href="#启动虚拟环境" class="headerlink" title="启动虚拟环境"></a>启动虚拟环境</h3><p>workon venv</p><h3 id="退出虚拟环境"><a href="#退出虚拟环境" class="headerlink" title="退出虚拟环境"></a>退出虚拟环境</h3><p>deactivate</p><h3 id="删除虚拟环境"><a href="#删除虚拟环境" class="headerlink" title="删除虚拟环境"></a>删除虚拟环境</h3><p>rmvirtualenv</p><h3 id="查看虚拟环境中的包"><a href="#查看虚拟环境中的包" class="headerlink" title="查看虚拟环境中的包"></a>查看虚拟环境中的包</h3><p>pip list<br>pip freeze</p><h3 id="查看虚拟环境"><a href="#查看虚拟环境" class="headerlink" title="查看虚拟环境"></a>查看虚拟环境</h3><p>workon 两次tab键</p><h3 id="进入后安装包"><a href="#进入后安装包" class="headerlink" title="进入后安装包"></a>进入后安装包</h3><p>pip install django==1.8.2</p><h2 id="django"><a href="#django" class="headerlink" title="django"></a>django</h2><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>django-admin startproject myproject</p><h3 id="添加应用"><a href="#添加应用" class="headerlink" title="添加应用"></a>添加应用</h3><p>python manage.py startapp news</p><h3 id="将应用添加到setting-py中的install中"><a href="#将应用添加到setting-py中的install中" class="headerlink" title="将应用添加到setting.py中的install中"></a>将应用添加到setting.py中的install中</h3><h3 id="编写model"><a href="#编写model" class="headerlink" title="编写model"></a>编写model</h3><h3 id="转移model-gt-python-manage-py-makemigrations"><a href="#转移model-gt-python-manage-py-makemigrations" class="headerlink" title="转移model =&gt;python manage.py makemigrations"></a>转移model =&gt;python manage.py makemigrations</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;python-字符格式化&quot;&gt;&lt;a href=&quot;#python-字符格式化&quot; class=&quot;headerlink&quot; title=&quot;python 字符格式化&quot;&gt;&lt;/a&gt;python 字符格式化&lt;/h2&gt;&lt;h3 id=&quot;python采用和c语言的方式，-格式化。例如：&quot;
      
    
    </summary>
    
    
      <category term="python" scheme="yexiaosong.github.io/categories/python/"/>
    
    
      <category term="learn" scheme="yexiaosong.github.io/tags/learn/"/>
    
  </entry>
  
  <entry>
    <title>SQL学习(一)</title>
    <link href="yexiaosong.github.io/2017/06/05/Sql/"/>
    <id>yexiaosong.github.io/2017/06/05/Sql/</id>
    <published>2017-06-05T11:07:23.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><p>sql简介</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建: <span class="keyword">create</span> <span class="keyword">database</span> mydb;</span><br><span class="line">使用: <span class="keyword">use</span> mydb;</span><br><span class="line">删除: <span class="keyword">drop</span> <span class="keyword">database</span> mydb;</span><br><span class="line">查看使用的数据库: <span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">将当前目录下的sql文件导入sql数据库：SOURCE ./mysql.sql;</span><br></pre></td></tr></table></figure><h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">创建：<span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span>，<span class="keyword">user</span> <span class="built_in">varchar</span>(<span class="number">20</span>));</span><br><span class="line">插入：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">0</span>)</span><br><span class="line">删除：<span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">清空表：<span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">查看表结构 <span class="keyword">describe</span> <span class="keyword">user</span></span><br><span class="line">按照表的结构添加数据：<span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="number">0</span>,<span class="string">"alex"</span>)</span><br><span class="line">指定添加部分值： <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>) <span class="keyword">values</span> (<span class="number">1</span>)。即可只插入<span class="keyword">id</span></span><br><span class="line">修改表中的元素： <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">user</span>=<span class="string">'jack'</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>, 这样可以将上一步骤中的<span class="keyword">user</span>设置为jack</span><br></pre></td></tr></table></figure><h2 id="表的编辑"><a href="#表的编辑" class="headerlink" title="表的编辑"></a>表的编辑</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ 逻辑删除</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> isdelete <span class="built_in">bit</span> <span class="keyword">default</span> <span class="number">0</span>;//更改了表的结构</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> isdelete=<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;//给表赋值</span><br><span class="line">+ 物理删除</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><ol><li>sudo su</li><li>cd /var/lib/mysql</li><li>mysqldump -uroot -p 数据库名 &gt; ~/user/backup.sql</li></ol><h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><ul><li>mysql -uroot -p 数据库名 &lt; ~/user/backup.sql</li></ul><p>##查询操作</p><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> age <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">&lt;!<span class="comment">-- distinct 关键字筛选的是整句的条件 --&gt;</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">id</span>,age <span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line">&lt;!<span class="comment">-- 必须id和age都不同才算不重复 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age=<span class="number">20</span> <span class="keyword">and</span> <span class="keyword">name</span>=<span class="string">'jack'</span>;</span><br></pre></td></tr></table></figure><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select * from user where name like &#39;J%&#39;;</span><br><span class="line">表示从表中查找已J开头，后面可以有任意位的数据。</span><br><span class="line">select * from user where name like &#39;J_&#39;</span><br><span class="line">表示查询表中以J开头，后面可以有一位的数据。</span><br></pre></td></tr></table></figure><h3 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">取出id为1,3,4的数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span>;</span><br><span class="line">取出id从1到3的数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="keyword">is</span> <span class="literal">null</span>;</span><br><span class="line">取出user表中age为null的数据</span><br><span class="line"></span><br><span class="line">优先级：</span><br><span class="line">小括号&gt;not&gt;比较运算符&gt;逻辑运算符</span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">搜索user表中数据总数</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">找最小的id,同理有max</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(<span class="keyword">id</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line">奖user的id加起来，同理有avg(列)求此列的平均值</span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age, <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> <span class="keyword">count</span>(*)&gt;<span class="number">2</span>;</span><br><span class="line">where 是对原始集合进行筛选，having 是对 group by刷选后的值进行筛选。如果使用：</span><br><span class="line"><span class="keyword">select</span> age, <span class="keyword">count</span>(*) <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> age <span class="keyword">having</span> rs&gt;<span class="number">2</span>; 则筛选出来的结果第二列名为rs</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>(升序) | <span class="keyword">desc</span> (降序), <span class="keyword">name</span> <span class="keyword">asc</span> | <span class="keyword">desc</span></span><br><span class="line">先按age行排，然后再按<span class="keyword">name</span>行排</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">limit</span> <span class="keyword">start</span>,<span class="keyword">count</span> ,</span><br><span class="line">其中<span class="keyword">start</span>从<span class="number">0</span>开始 ，所以在求第n页数据时，<span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age=<span class="number">22</span> <span class="keyword">limit</span> (n<span class="number">-1</span>)*m,m</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>select distinct * from TABLENAME where … group by … having … order by … limit start,count,其中，执行顺序为from TABLENAME -&gt;where …-&gt; group by …-&gt; select distinct -&gt; having… -&gt; order by … -&gt; limit start,count</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sql&quot;&gt;&lt;a href=&quot;#sql&quot; class=&quot;headerlink&quot; title=&quot;sql&quot;&gt;&lt;/a&gt;sql&lt;/h1&gt;&lt;p&gt;sql简介&lt;/p&gt;
&lt;h2 id=&quot;数据库操作&quot;&gt;&lt;a href=&quot;#数据库操作&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="boce" scheme="yexiaosong.github.io/categories/boce/"/>
    
    
      <category term="boce" scheme="yexiaosong.github.io/tags/boce/"/>
    
  </entry>
  
  <entry>
    <title>jade(pug) 学习笔记</title>
    <link href="yexiaosong.github.io/2017/01/14/jade%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>yexiaosong.github.io/2017/01/14/jade%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2017-01-14T10:48:11.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jade安装"><a href="#jade安装" class="headerlink" title="jade安装"></a>jade安装</h2><p>……</p><h2 id="jade语法"><a href="#jade语法" class="headerlink" title="jade语法"></a>jade语法</h2><h3 id="jade基础语法"><a href="#jade基础语法" class="headerlink" title="jade基础语法"></a>jade基础语法</h3><h4 id="大段文本可以使用两种方式"><a href="#大段文本可以使用两种方式" class="headerlink" title="大段文本可以使用两种方式"></a>大段文本可以使用两种方式</h4><ul><li>标签下的每一行，tab制表并输入|和空格，再写入文本。</li><li>标签后面紧随其后输入.回车，tab制表后输入文本<h4 id="jade数据绑定"><a href="#jade数据绑定" class="headerlink" title="jade数据绑定"></a>jade数据绑定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#&#123;变量&#125;</span><br></pre></td></tr></table></figure><h4 id="jade进行数据传递"><a href="#jade进行数据传递" class="headerlink" title="jade进行数据传递"></a>jade进行数据传递</h4></li></ul><ul><li>命令行方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade index.jade -P -w --obj &#39;&#123;&quot;lesson&quot;,&quot;jade&quot;&#125;&#39;</span><br></pre></td></tr></table></figure></li><li>json方式传递<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jade index.jade -P -w -O test.json</span><br></pre></td></tr></table></figure><h4 id="jade转义与非转义"><a href="#jade转义与非转义" class="headerlink" title="jade转义与非转义"></a>jade转义与非转义</h4><ul><li>使用#{变量}的方式会进行安全转义</li><li>使用!{变量}的方式不会转义<h4 id="流程代码"><a href="#流程代码" class="headerlink" title="流程代码"></a>流程代码</h4></li><li>for<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p for语句用法</span><br><span class="line">        -   var data&#x3D;&#123;&quot;lesson&quot;:&quot;jade&quot;,&quot;lv&quot;:&quot;high&quot;&#125;</span><br><span class="line">        -   for(var k in data)</span><br><span class="line">            p&#x3D;data[k]</span><br><span class="line">&#x2F;&#x2F;p标签内的内容改为对应对象，出现两个p标签，里面分别是jade和high。</span><br></pre></td></tr></table></figure></li><li>each<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p each语句用法</span><br><span class="line">        -   var data&#x3D;&#123;&quot;lesson&quot;:&quot;jade&quot;,&quot;lv&quot;:&quot;high&quot;&#125;</span><br><span class="line">        -   each value,key in data</span><br><span class="line">            p #&#123;key&#125;: #&#123;value&#125;</span><br><span class="line">&#x2F;&#x2F;p标签内lesson:jade,lv:high</span><br></pre></td></tr></table></figure></li><li>if…else(注意回车和制表符)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p if...else</span><br><span class="line">        -   var data&#x3D;&#123;&quot;lesson&quot;:&quot;jade&quot;,&quot;lv&quot;:&quot;high&quot;&#125;</span><br><span class="line">        if data</span><br><span class="line">            p has data</span><br><span class="line">        else</span><br><span class="line">            p no data</span><br></pre></td></tr></table></figure><h4 id="mixin语法"><a href="#mixin语法" class="headerlink" title="mixin语法"></a>mixin语法</h4>mixin相当于代码块<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mixin lesson</span><br><span class="line">    p lesson jade</span><br><span class="line">+lesson</span><br><span class="line">+lesson</span><br><span class="line">&#x2F;&#x2F;此时就调用了两次mixin模块</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jade安装&quot;&gt;&lt;a href=&quot;#jade安装&quot; class=&quot;headerlink&quot; title=&quot;jade安装&quot;&gt;&lt;/a&gt;jade安装&lt;/h2&gt;&lt;p&gt;……&lt;/p&gt;
&lt;h2 id=&quot;jade语法&quot;&gt;&lt;a href=&quot;#jade语法&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="FE" scheme="yexiaosong.github.io/categories/FE/"/>
    
    
      <category term="FE" scheme="yexiaosong.github.io/tags/FE/"/>
    
  </entry>
  
  <entry>
    <title>mongoose 学习</title>
    <link href="yexiaosong.github.io/2017/01/11/mongoose%E5%AD%A6%E4%B9%A0/"/>
    <id>yexiaosong.github.io/2017/01/11/mongoose%E5%AD%A6%E4%B9%A0/</id>
    <published>2017-01-11T12:01:28.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mongoose基本使用"><a href="#mongoose基本使用" class="headerlink" title="mongoose基本使用"></a>mongoose基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="comment">//1.创建连接</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/myBlog'</span>)</span><br><span class="line"><span class="comment">//2.创建UserSchema方法</span></span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    nickname:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">'hah'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    creatTime:&#123;</span><br><span class="line">        type:<span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="built_in">Date</span>.now()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3.创建User数据模型</span></span><br><span class="line"><span class="keyword">var</span> User=mongoose.model(<span class="string">'User'</span>,UserSchema)</span><br><span class="line"><span class="comment">//4.创建实例user</span></span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> User()</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br></pre></td></tr></table></figure><h3 id="mongoose的set和get修饰符"><a href="#mongoose的set和get修饰符" class="headerlink" title="mongoose的set和get修饰符"></a>mongoose的set和get修饰符</h3><ul><li>get <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/myBlog'</span>)</span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    blog:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">get</span>: function(url)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!url) <span class="keyword">return</span> url;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">0</span>!==url.indexOf(<span class="string">"http://"</span>)&amp;&amp; <span class="number">0</span>!==url.indexOf(<span class="string">"https://"</span>))</span><br><span class="line">                url=<span class="string">'http://'</span>+url;</span><br><span class="line">                <span class="keyword">return</span> url;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> User= mongoose.model(<span class="string">'User'</span>,UserSchema);</span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> User(&#123;</span><br><span class="line">    blog:<span class="string">'www.heheda.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;<span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'save err'</span>);&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'user blog is  '</span>+user.blog);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//结果是把网址的协议补充完整，get在数据初始化后、保存文件之前进行的</span></span><br></pre></td></tr></table></figure></li><li>set与get用法相同，只是处理的时间不同。<h3 id="mongoose的虚拟属性Schema-virtual"><a href="#mongoose的虚拟属性Schema-virtual" class="headerlink" title="mongoose的虚拟属性Schema.virtual()"></a>mongoose的虚拟属性Schema.virtual()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line"><span class="keyword">var</span> PersonSchema=<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    firstName:<span class="built_in">String</span>,</span><br><span class="line">    lastName:<span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line">PersonSchema.virtual(<span class="string">'fullname'</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName+<span class="string">'-'</span>+<span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> Person=mongoose.model(<span class="string">'Person'</span>,PersonSchema);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person=<span class="keyword">new</span> Person(&#123;</span><br><span class="line">    firstName:<span class="string">'Alex'</span>,</span><br><span class="line">    lastName:<span class="string">'Ye'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'user fullname'</span>,person.fullname);</span><br></pre></td></tr></table></figure>但是在模型实例转化为JSON属性时，会显示firstName及lastName,没有fullname.<br>,为了让其显示虚拟属性，需要在PersonSchema.virtual…代码块后面加一句<br>PersonSchema.set(‘toJSON’,{getter:true,virtual:true});<h3 id="mongoose的索引"><a href="#mongoose的索引" class="headerlink" title="mongoose的索引"></a>mongoose的索引</h3></li></ul><h3 id="mongoose模型的方法"><a href="#mongoose模型的方法" class="headerlink" title="mongoose模型的方法"></a>mongoose模型的方法</h3><ul><li>添加静态方法(调用静态方法，使用模型调用即可)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/myBlog'</span>)</span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    id:<span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line">UserSchema.statics.findById=<span class="function"><span class="keyword">function</span>(<span class="params">id,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.findOne(&#123;<span class="attr">id</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">        cb(err,doc)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> User= mongoose.model(<span class="string">'User'</span>,UserSchema);</span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> User(&#123;</span><br><span class="line">    name:<span class="string">"yezong"</span>,</span><br><span class="line">    id:<span class="number">10086</span></span><br><span class="line">&#125;);</span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'save user failed'</span>,err);</span><br><span class="line">    &#125;</span><br><span class="line">    User.findById(<span class="number">10086</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'findById,err,doc:'</span>,err,doc);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>实例方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose=<span class="built_in">require</span>(<span class="string">'mongoose'</span>)</span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/myBlog'</span>)</span><br><span class="line"><span class="keyword">var</span> UserSchema=mongoose.Schema(&#123;</span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    id:<span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line">UserSchema.statics.findById=<span class="function"><span class="keyword">function</span>(<span class="params">id,cb</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.findOne(&#123;<span class="attr">id</span>:id&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">        cb(err,doc)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">UserSchema.methods.print=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the name of the user:'</span>+<span class="keyword">this</span>.name)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the id of the user:'</span>+<span class="keyword">this</span>.id)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> User= mongoose.model(<span class="string">'User'</span>,UserSchema);</span><br><span class="line"><span class="keyword">var</span> user=<span class="keyword">new</span> User(&#123;</span><br><span class="line">    name:<span class="string">"yezong"</span>,</span><br><span class="line">    id:<span class="number">10086</span></span><br><span class="line">&#125;);</span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">'save user failed'</span>,err);</span><br><span class="line">    &#125;</span><br><span class="line">    User.findById(<span class="number">10086</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'findById,err,doc:'</span>,err,doc);</span><br><span class="line">    &#125;)</span><br><span class="line">    user.print();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="数据校验（在mongoose-Schema对象内声明）"><a href="#数据校验（在mongoose-Schema对象内声明）" class="headerlink" title="数据校验（在mongoose.Schema对象内声明）"></a>数据校验（在mongoose.Schema对象内声明）</h3></li><li>required如果分号后为true的话没有数据会报错</li><li>max min<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3></li><li>post保存好进行操作<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> UserSchema=<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    address: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line">UserSchema.post(<span class="string">'save'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'sucess'</span>);</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//操作过程，先保存，在进行console操作，最后next</span></span><br></pre></td></tr></table></figure></li><li>pre保存前操作<h3 id="ref读取别的数据库（官方文档的Population）"><a href="#ref读取别的数据库（官方文档的Population）" class="headerlink" title="ref读取别的数据库（官方文档的Population）"></a>ref读取别的数据库（官方文档的Population）</h3></li><li>DBref</li><li>populate()<h3 id="运算符"><a href="#运算符" class="headerlink" title="$运算符"></a>$运算符</h3></li><li>或查询<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cond=&#123;</span><br><span class="line">    $or:[</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">"Alex"</span>&#125;</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">"Aston"</span>&#125;</span><br><span class="line">]&#125; </span><br><span class="line">user.find(cond,<span class="function"><span class="keyword">function</span>(<span class="params">err,doc</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">    <span class="comment">//...省略</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mongoose基本使用&quot;&gt;&lt;a href=&quot;#mongoose基本使用&quot; class=&quot;headerlink&quot; title=&quot;mongoose基本使用&quot;&gt;&lt;/a&gt;mongoose基本使用&lt;/h3&gt;&lt;figure class=&quot;highlight javascri
      
    
    </summary>
    
    
      <category term="boce" scheme="yexiaosong.github.io/categories/boce/"/>
    
    
      <category term="boce" scheme="yexiaosong.github.io/tags/boce/"/>
    
  </entry>
  
  <entry>
    <title>REDIS 学习(nodejs版)</title>
    <link href="yexiaosong.github.io/2017/01/09/redis%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/"/>
    <id>yexiaosong.github.io/2017/01/09/redis%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3/</id>
    <published>2017-01-09T08:39:20.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>redis是一个高效的内存key-value数据库，而且可以刷至磁盘</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>电脑安装sudo apt install redis </li><li>node添加链接中间件 npm install redis<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</span><br><span class="line"><span class="keyword">var</span> client = redis.createClient(<span class="number">6379</span>, <span class="string">'localhost'</span>);</span><br><span class="line">client.set(<span class="string">'hello'</span>, <span class="string">'first redis demo'</span>);</span><br><span class="line">client.get(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the hello value is: '</span>, err, v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>如果在createClient的时候传入对象，则保存为字符串。默认调用toString()方法。在后续版本中将报错<h3 id="list列表操作-插入元素"><a href="#list列表操作-插入元素" class="headerlink" title="list列表操作(插入元素)"></a>list列表操作(插入元素)</h3></li><li>lpush rpush…插入操作</li><li>lrange 读取操作，默认lrange(0,-1)就表示从左取到右<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接上述入门程序</span></span><br><span class="line">client.lpush(<span class="string">'testLists'</span>, <span class="string">'2'</span>);</span><br><span class="line">client.lpush(<span class="string">'testLists'</span>, <span class="string">'3'</span>);</span><br><span class="line">client.lpush(<span class="string">'testLists'</span>, <span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(client.lrange(<span class="string">'testLists'</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, list</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"the content: "</span>, list);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></li><li>lpop左出栈</li><li>rpop右出栈<h3 id="set集合操作-插入不重复数据"><a href="#set集合操作-插入不重复数据" class="headerlink" title="set集合操作(插入不重复数据)"></a>set集合操作(插入不重复数据)</h3></li><li>sadd集合添加数据</li><li>smember取出集合中的数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">client.sadd(<span class="string">'testSet'</span>, <span class="string">'10'</span>)</span><br><span class="line">client.sadd(<span class="string">'testSet'</span>, <span class="string">'20'</span>)</span><br><span class="line">client.sadd(<span class="string">'testSet'</span>, <span class="string">'30'</span>)</span><br><span class="line"></span><br><span class="line">client.smembers(<span class="string">'testSet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'the set content: '</span>, err, v);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="消息中介"><a href="#消息中介" class="headerlink" title="消息中介"></a>消息中介</h3></li><li>publish发送消息</li><li>subscribe接受消息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//publish.js</span></span><br><span class="line">client.publish(<span class="string">'testPublish'</span>,<span class="string">'111222333'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//subscribe.js</span></span><br><span class="line">client.subscribe(<span class="string">'testPublish'</span>)</span><br><span class="line">client.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">channel,msg</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(channel,msg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//on事件必须绑定message事件，每当pub放推个消息，sub端都会手动，可一次作为进程间的通信</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;redis是一个高效的内存key-value数据库，而且可以刷至磁盘&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class
      
    
    </summary>
    
    
      <category term="boce" scheme="yexiaosong.github.io/categories/boce/"/>
    
    
      <category term="boce" scheme="yexiaosong.github.io/tags/boce/"/>
    
  </entry>
  
  <entry>
    <title>Node学习笔记</title>
    <link href="yexiaosong.github.io/2016/10/07/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>yexiaosong.github.io/2016/10/07/node%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2016-10-07T15:39:16.000Z</published>
    <updated>2020-10-11T17:15:44.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><ul><li>es6的新属性<ul><li>let , const定义变量。let声明的代码值在块作用域里有效，同时不会有变量提升。</li><li>=&gt;箭头式函数，可以不改变this指针。</li><li>es6有块级作用域</li><li>模板字符串，使用两个反引号包起来。``里面可以有回车，换行等。</li></ul></li><li>异步非堵塞的相关知识</li><li>正则表达式<ul><li>match函数，stringObj.match(regExp)。有则返回注释部分，没有则返回null。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'aabbccdd'</span>;</span><br><span class="line"><span class="keyword">var</span> res=str.match(<span class="regexp">/aa/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">//res输出为['aa',index:0,input:'aabbccdd'];</span></span><br></pre></td></tr></table></figure></li><li>exec函数,regExp.exec(stringObj)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'aabbccdd'</span>;</span><br><span class="line"><span class="keyword">var</span> res = <span class="regexp">/aa/</span>.exec(str);</span><br><span class="line"><span class="built_in">console</span>.log(res);<span class="comment">//res输出为['aa',index:0,input:'aabbccdd'];</span></span><br></pre></td></tr></table></figure></li><li>test函数，regExp.test(str).</li><li>search函数，stringObj.search(regExp)</li><li>replace函数，stringObj.search(regExp,replaceTest)</li><li>split函数，stringObj.split([separator[,limit]]);separator表示分隔符，可以为符号或正则表达式。<br>limit表示限制数组返回的个数。<h2 id="exec函数和match函数的区别："><a href="#exec函数和match函数的区别：" class="headerlink" title="exec函数和match函数的区别："></a>exec函数和match函数的区别：</h2></li></ul></li><li>方法所有者不同，match属于string，exec属于regaExp</li><li>match返回值：如果没有使用g(全局匹配)选项，则返回第一个匹配的字符串、<br>该字符串所在位置及原始字符串组成的数组，如果使用g选项，则返回所有匹配的字符串组成的数组</li><li>exec返回值：无论有无g选项，都返回第一个匹配的字符串、该字符串所在位置及原始字符串组成<br>的数组，但是该方法可以返回子匹配项，是match所不能及的</li></ul><h1 id="node-js基本概念"><a href="#node-js基本概念" class="headerlink" title="node.js基本概念"></a>node.js基本概念</h1><h2 id="REPL-交互式解释器read-eval-print-loop"><a href="#REPL-交互式解释器read-eval-print-loop" class="headerlink" title="REPL (交互式解释器read eval print loop)"></a>REPL (交互式解释器read eval print loop)</h2><ul><li>_下划线表示获取上一表达式的值。</li><li>.help表示列出使用命令<h2 id="命令行实质（argv）"><a href="#命令行实质（argv）" class="headerlink" title="命令行实质（argv）"></a>命令行实质（argv）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = process.argv.slice(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"init"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'you are init a command'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'what is your meaning'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看出，argv就是你输入的命令并将其以数组方式存放。<h2 id="标准输入输出（stdin-stdout）"><a href="#标准输入输出（stdin-stdout）" class="headerlink" title="标准输入输出（stdin stdout）"></a>标准输入输出（stdin stdout）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.stdin.on(<span class="string">'data'</span>, (input) =&gt; &#123;</span><br><span class="line">    input = input.toString().trim();</span><br><span class="line">    process.stdout.write(input + <span class="string">'nihao'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="基本API使用"><a href="#基本API使用" class="headerlink" title="基本API使用"></a>基本API使用</h1><h2 id="node-模块加载顺序，以require-some-module-时的加载顺序"><a href="#node-模块加载顺序，以require-some-module-时的加载顺序" class="headerlink" title="node 模块加载顺序，以require(some_module)时的加载顺序"></a>node 模块加载顺序，以require(some_module)时的加载顺序</h2><ol><li>如果是node的核心模块，找到后结束。</li><li>如果some_module以”./“, “/“, “../“时，按路径加载模块，结束。</li><li>如果当前目录为current_dir,  按路径加载 current_dir/node_modules/some_module<ul><li>加载成功，结束。</li><li>加载失败，令current_dir为其父目录，继续加载。</li><li>重复加载，直到根目录，抛出异常，结束。</li></ul></li></ol><h2 id="fs模块与path模块"><a href="#fs模块与path模块" class="headerlink" title="fs模块与path模块"></a>fs模块与path模块</h2><ul><li>fs.readFile<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'./a.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">+ path</span></span><br><span class="line"><span class="string"> - path.join(__dirname,'..','a','b.txt): 拼接路径，非常常用。</span></span><br><span class="line"><span class="string"> - path.basename('a/b/c.txt): 获取路径中的文件名</span></span><br><span class="line"><span class="string"> - 小实例详询API</span></span><br><span class="line"><span class="string">+ 综合应用</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">//将文件加载到流中，并在控制台中打印</span></span><br><span class="line"><span class="keyword">const</span> buffer = fs.readFileSync(path.join(__dirname, <span class="string">'./haha/lrc.txt'</span>));</span><br><span class="line"><span class="keyword">const</span> content = buffer.toString();</span><br><span class="line"><span class="built_in">console</span>.log(content);</span><br></pre></td></tr></table></figure></li></ul><ul><li>但是发现当文本文件为gbk编码时，打印乱码。所以使用第三方库iconv，如下问题解决。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = fs.readFileSync(path.join(__dirname, <span class="string">'./haha/lrc.txt'</span>));</span><br><span class="line"><span class="keyword">var</span> content = iconv.decode(buffer, <span class="string">'gbk'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(content);</span><br></pre></td></tr></table></figure></li><li>以流的方式，使用iconv库采用pipe方法，同时使用readline综合实现读取文档<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">'readline'</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stream = fs.createReadStream(path.join(__dirname, <span class="string">'./a.txt'</span>));</span><br><span class="line">stream = stream.pipe(iconv.decodeStream(<span class="string">'GBK'</span>));</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: stream,</span><br><span class="line">   <span class="comment">// output: process.stdout</span></span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">'line'</span>, (line) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`received: <span class="subst">$&#123;line&#125;</span> \n`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h2><h3 id="1-events对象中只提供一个对象，events-EventEmitter。它的核心就是事件的封装和触发。"><a href="#1-events对象中只提供一个对象，events-EventEmitter。它的核心就是事件的封装和触发。" class="headerlink" title="1.events对象中只提供一个对象，events.EventEmitter。它的核心就是事件的封装和触发。"></a>1.events对象中只提供一个对象，events.EventEmitter。它的核心就是事件的封装和触发。</h3><h3 id="2-events对象经典方式实现事件绑定及触发。（不合理）"><a href="#2-events对象经典方式实现事件绑定及触发。（不合理）" class="headerlink" title="2.events对象经典方式实现事件绑定及触发。（不合理）"></a>2.events对象经典方式实现事件绑定及触发。（不合理）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter; </span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> EventEmitter(); </span><br><span class="line">event.on(<span class="string">'some_event'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'some_event 事件触发'</span>); </span><br><span class="line">&#125;); </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">event.emit(<span class="string">'some_event'</span>); </span><br><span class="line">&#125;, <span class="number">1000</span>); </span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">### 3.events对象es6新语法实现事件绑定及触发。（合理）</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">const</span> EventEmitter=<span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter=<span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>,()=&gt;&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'woca'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="events常见的方法及描述"><a href="#events常见的方法及描述" class="headerlink" title="events常见的方法及描述"></a>events常见的方法及描述</h3><ul><li>addListener(event,listener);给制定监听器添加一个监听到时间尾部。</li><li>once(event,listener); 给事件注册一个最多执行一次的监听器</li><li>removeListener(event,listener);</li><li>removeAllListener(event,listener);</li><li>setMaxListener(int);在监听事件过多时会出现错误，通过此方法实现最大值设置。</li><li>emit(event,[arg1],[arg2],[…]);按顺序执行每个监听器。<h2 id="stream流"><a href="#stream流" class="headerlink" title="stream流"></a>stream流</h2><h3 id="四种流的类型"><a href="#四种流的类型" class="headerlink" title="四种流的类型"></a>四种流的类型</h3></li><li>Readable</li><li>Writable</li><li>Duplex</li><li>Transform<h3 id="所有的Stream对象都是EventEmitter对象的实例"><a href="#所有的Stream对象都是EventEmitter对象的实例" class="headerlink" title="所有的Stream对象都是EventEmitter对象的实例"></a>所有的Stream对象都是EventEmitter对象的实例</h3></li><li>data—当有数据可读时触发</li><li>end—-没数据可读时触发</li><li>error–错误时触发</li><li>finish-结束时触发<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 创建可读流</span></span><br><span class="line"><span class="keyword">var</span> readerStream = fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="comment">// 设置编码为 utf8。</span></span><br><span class="line">readerStream.setEncoding(<span class="string">'UTF8'</span>);</span><br><span class="line"><span class="comment">// 处理流事件 --&gt; data, end, and error</span></span><br><span class="line">readerStream.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">   data += chunk;</span><br><span class="line">&#125;);</span><br><span class="line">readerStream.on(<span class="string">'end'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line">readerStream.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(err.stack);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕"</span>);</span><br></pre></td></tr></table></figure><h3 id="pipe-非常好用的管道流"><a href="#pipe-非常好用的管道流" class="headerlink" title="pipe,非常好用的管道流"></a>pipe,非常好用的管道流</h3></li></ul></li></ul><ul><li>基本使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> readStream=fs.createReadStream(<span class="string">'input.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> writerStream=fs.createReadStream(<span class="string">'output.txt'</span>);</span><br><span class="line">readStream.pipe(writerStream);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br></pre></td></tr></table></figure></li><li>pipe同事支持链式编程。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础准备&quot;&gt;&lt;a href=&quot;#基础准备&quot; class=&quot;headerlink&quot; title=&quot;基础准备&quot;&gt;&lt;/a&gt;基础准备&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;es6的新属性&lt;ul&gt;
&lt;li&gt;let , const定义变量。let声明的代码值在块作用域里有效，同时不会有变
      
    
    </summary>
    
    
      <category term="FE" scheme="yexiaosong.github.io/categories/FE/"/>
    
    
      <category term="FE" scheme="yexiaosong.github.io/tags/FE/"/>
    
  </entry>
  
</feed>
